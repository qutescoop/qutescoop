/**************************************************************************
 *  This file is part of QuteScoop. See README for license
 **************************************************************************/

#ifndef WINDOW_H_
#define WINDOW_H_

#include <QTimer>
#include <QSortFilterProxyModel>

#include "ui_MainWindow.h" // file generated by UIC from MainWindow.ui
#include "GLWidget.h"
#include "Whazzup.h"
#include "ClientSelectionWidget.h"
#include "PreferencesDialog.h"
#include "PlanFlightDialog.h"
#include "BookedAtcDialog.h"
#include "ListClientsDialog.h"
#include "SearchResultModel.h"
#include "MetarModel.h"

class Window : public QMainWindow, private Ui::MainWindow {

Q_OBJECT

public:
    static Window* getInstance();
    //~Window();
    void setStatusText(QString text);
    void setProgressBar(int prog, int tot);
    void setProgressBar(bool isVisible);
    void setEnableBookedAtc(bool enable);
    void setPlotFlightPlannedRoute(bool value);
    void shootScreenshot();
    GLWidget *glWidget;

public slots:
    void showOnMap(double lat, double lon);
    void updateMetarDecoder(const QString& airport, const QString& decodedText);
    void refreshFriends();
    void updateGLPilots();

private slots:
    void on_actionShowRoutes_triggered(bool checked);
    void on_actionDebugLog_triggered();
    void on_tbZoomOut_clicked();
    void on_tbZoomIn_clicked();

    void on_actionMoveDown_triggered();
    void on_actionMoveUp_triggered();
    void on_actionMoveRight_triggered();
    void on_actionMoveLeft_triggered();

    void on_actionRememberPosition_triggered();
    void on_actionRememberMapPosition2_triggered();
    void on_actionRememberMapPosition3_triggered();
    void on_actionRememberMapPosition4_triggered();
    void on_actionRememberMapPosition5_triggered();
    void on_actionRememberMapPosition6_triggered();
    void on_actionRememberMapPosition7_triggered();

    void on_actionRecallMapPosition_triggered();
    void on_actionRecallMapPosition2_triggered();
    void on_actionRecallMapPosition3_triggered();
    void on_actionRecallMapPosition4_triggered();
    void on_actionRecallMapPosition5_triggered();
    void on_actionRecallMapPosition6_triggered();
    void on_actionRecallMapPosition7_triggered();

    void on_actionHideAllWindows_triggered();

    void on_actionPredict_toggled(bool );
    void on_timePredictTime_timeChanged(QTime date);
    void on_datePredictTime_dateChanged(QDate date);
    void on_tbDisablePredict_clicked();
    void on_tbRunPredict_toggled(bool checked);
    void on_cbUseDownloaded_toggled(bool checked);
    void performWarp(bool forceUseDownloaded = false);
    void runPredict();

    void about();

    void networkMessage(QString message);
    void downloadError(QString message);
    void toggleFullscreen();
    void whazzupDownloaded(bool isNew = true);
    void mapClicked(int x, int y, QPoint absolutePos);
    void openPreferences();
    void openPlanFlight();
    void openBookedAtc();
    void openListClients();

    void on_searchEdit_textChanged(const QString& text);

    void on_metarEdit_textChanged(const QString& text);
    void on_btnRefreshMetar_clicked();

    void performSearch();
    void updateMetars();
    void metarDoubleClicked(const QModelIndex& index);
    void metarDockMoved(Qt::DockWidgetArea area);
    void searchDockMoved(Qt::DockWidgetArea area);
    void metarDecoderDockMoved(Qt::DockWidgetArea area);
    void friendsDockMoved(Qt::DockWidgetArea area);

    void friendClicked(const QModelIndex& index);
    void friendDoubleClicked(const QModelIndex& index);

    void versionDownloaded(bool error);
    void downloadWatchdogTriggered();
    void dataVersionDownloaded();
    void newDataVersionsDownloaded();

protected:
    virtual void closeEvent(QCloseEvent *event);

private:
    void checkForUpdates();
    void checkForDataUpdates();

    void updateTitlebarAfterMove(Qt::DockWidgetArea, QDockWidget *dock);

    // singleton
    Window(QWidget *parent = 0);
    void createActions();

    //QToolBar *toolBar;
    ClientSelectionWidget *clientSelection;

    SearchResultModel searchResultModel, friendsModel;
    QTimer searchTimer, metarTimer, warpTimer, runPredictTimer;
    QTimer downloadWatchdog;
    QSortFilterProxyModel *metarSortModel, *friendsSortModel;
    MetarModel metarModel;

    QHttp *versionChecker;
    QHttp *dataVersionChecker;
    QBuffer *versionBuffer;
    QFile *dataversionBuffer;
    QStringList filesToUpdate;
    QList<QFile*> datadownloads;

    QTime timePredictTime_old;
    QDate datePredictTime_old;

    QLabel *lblStatus;
    QProgressBar *progressBar;
};

#endif /*WINDOW_H_*/
